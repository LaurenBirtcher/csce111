/**
@author Janie Che
@version 12/1/18
*/

/**
This class will take the user through a series of steps to prepare for the bike trip.
*/

import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import java.awt.Desktop;
import java.net.URI;

public class RidePrep {

  //String getSkillLevel;
  //String getDistance;
  //String getDestination;
  String getBikeTrail;

  public void getTrail() {
      TrailSelect myTrail = new TrailSelect();
      //String string1 = "";
      //String string2 = "";
      //String string3 = "";
      String test1 = myTrail.SkillLevel();
      String test2 = myTrail.Distance();
      String test3 = myTrail.Destination();
      getBikeTrail = myTrail.ChooseTrail(test1, test2, test3);
  }

  /**
  This method recommendPack will ask the user to build a packing list. An option to
  open a website https://trektravel.com/frequently-asked-questions/packing-list/#printpackinglistThe
  for recommended items is available. Then, the user will be asked to input items
  into an array of strings by the packPrep and finishPacking method.
  */
  public void recommendPack() throws Exception {
    JOptionPane.showMessageDialog(null,"A packing checklist for your cycling vacation!","Ready to Pack??",JOptionPane.INFORMATION_MESSAGE);
    //https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html
    Object[] possibleValues = {"Yes, direct me to a website","No, I can make up my own list"};
    Object selectedValue = JOptionPane.showInputDialog(null,"Would you like a list of recommendations? Click Yes!","Link to Recommendations?",JOptionPane.INFORMATION_MESSAGE,null,possibleValues,possibleValues[0]);
    if (selectedValue == "Yes, direct me to a website") {
      JOptionPane.showMessageDialog(null,"I will link you to a website for recommendations.","Link to Recommendations?",JOptionPane.INFORMATION_MESSAGE);
      JOptionPane.showMessageDialog(null,"...LOADING...","Link to Recommendations?",JOptionPane.INFORMATION_MESSAGE);
      Thread.sleep(1500);
      websiteLink();
      Thread.sleep(4500);
      JOptionPane.showMessageDialog(null,"Let's build your own packing list now!","Ready to Pack??",JOptionPane.INFORMATION_MESSAGE);
    } else {
      JOptionPane.showMessageDialog(null,"Let's move on!","Ready to Pack??",JOptionPane.INFORMATION_MESSAGE);
    }//end if else
  }//end recommendPack

  /**
  This method websiteLink will link the user to a website when prompted. The website
  https://trektravel.com/frequently-asked-questions/packing-list/ will open. This
  will be used in the method recommendPack.
  */
  public void websiteLink() throws Exception {
    //https://www.youtube.com/watch?v=C_Y6yrkj9Sg
    Desktop web = Desktop.getDesktop();
    web.browse(new URI("https://trektravel.com/frequently-asked-questions/packing-list/#printpackinglist"));
  }//end websiteLink

  /**
  This method packPrep will ask the user to input packing list items into an array
  of strings. A few items will be recommended based on basic items needed. The method
  will call the displayPackingList method to display the recommended items and will
  call the determineTerrain method to tell the user the type of terrain the trail is.
  @return initial arraylist of items in packing list called recommendedList
  */
  public ArrayList<String> packPrep() {
    String recommendedItems [] = {"Cycling jerseys","Active socks","Cycling shoes",
      "Lightweight jacket(s)","Sunglasses","Wind/Rain jacket(s)","Helmet","Bike saddle"};
    ArrayList<String> recommendedList = new ArrayList<String>(Arrays.asList(recommendedItems));
    JOptionPane.showMessageDialog(null,"Here is a basic packing list of recommended items.","Recommended List",JOptionPane.INFORMATION_MESSAGE);
    displayPackingList(recommendedList);
    String bikeTrail = "";
    determineTerrain();
    return recommendedList;
  }//end packPrep

  /**
  This method displayPackingList displays the packing list in a message box. It
  will be called in multiple methods to show the user the final list.
  @param ArrayList<String> arraylist of packing list items
  */
  public void displayPackingList(ArrayList<String> recommendedList) {
    //https://stackoverflow.com/questions/16984221/display-arraylist-contents-in-a-joptionpane-showmessagedialog
    StringBuilder builder = new StringBuilder("<html>");
    for (int i = 0; i < recommendedList.size(); i++){
      builder.append(recommendedList.get(i));
      builder.append("<br>");
    }//end for loop
    builder.append("</html>");
    JOptionPane.showMessageDialog(null,builder.toString(),"Recommended List",JOptionPane.INFORMATION_MESSAGE);
  }//end displayPackingList

  /**
  This method determineTerrain will use the method ChooseTrail in TrailSelect. It will
  determine the terrain type based on the trail selected.
  */
  public void determineTerrain() {
    String terrainType = "";
    if(getBikeTrail.equals("Big Sur")) {
      terrainType = "Road";
    } else if(getBikeTrail.equals("Flume Trail")) {
      terrainType = "Mountain";
    } else if(getBikeTrail.equals("Shark Valley Trail")) {
      terrainType = "Road";
    } else if(getBikeTrail.equals("Valmont Bike Park")) {
      terrainType = "Mountain";
    }//end if else
    JOptionPane.showMessageDialog(null,"Based on the trial selected, the terrain is " + terrainType + ".","Add to Packing List",JOptionPane.INFORMATION_MESSAGE);
  }//end determineTerrain

  /**
  This method finishPacking will ask the user to input more packing items if he/she wants to.
  The items will be displayed.
  @param recommendedList initial arraylist of suggested items for everyone
  @return final arraylist of packing list items called finalList
  */
  public ArrayList<String> finishPacking(ArrayList <String> recommendedList){
    Object[] options = {"Yes, I would like to add items", "No, I am done with the list"};
    Object response = JOptionPane.showInputDialog(null,"Are there any other items you would like to add?","Add to Packing List?",JOptionPane.INFORMATION_MESSAGE,null,options,options[0]);
    if(response == "Yes, I would like to add items"){
      //https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html
      String inputItems = JOptionPane.showInputDialog("Enter an item you would like to add or enter stop: ");
      recommendedList.add(inputItems);
      while(!inputItems.equals("stop")){
        JOptionPane.showInputDialog("Enter an item you would like to add or enter stop: ");
        inputItems = JOptionPane.showInputDialog("Enter an item you would like to add: ");
        recommendedList.add(inputItems);
      }//end while
      recommendedList.remove("No, I am done with the list");
    }//end if
    JOptionPane.showMessageDialog(null,"Packing List Completed!","Ready for the trip??",JOptionPane.INFORMATION_MESSAGE);
    displayPackingList(recommendedList);
    return recommendedList;
  }//end finishPacking

  /**
  This method finalMap will ask the user to input if he/she is ready for the trip.
  It will then call the answers from the method ChooseTrail in TrailSelect. It will
  display the final trail selected and a photo of the final trail from TrailSelect.
  */
  public void finalMap(){
    JOptionPane.showMessageDialog(null,"You are all packed! Let's review your destination","Ready for the trip??",JOptionPane.INFORMATION_MESSAGE);
    //call bikeTrail from TrailSelect ChooseTrail method
    //use the showPicture method from TrailSelect to show picture of destination
    TrailSelect myTrail = new TrailSelect();
    String picName = "";
    myTrail.ShowPicture(picName);
    JOptionPane.showMessageDialog(null,"Fantastic! Let's go!","Ready for the trip??",JOptionPane.INFORMATION_MESSAGE);
  }//end finalMap

  /**
  This method animateBike prints a bike as ASCII art. It may be used as a smooth
  transition step throughout.
  */
  public void animateBike(){
    String line1 = new String("          __o                                                                                                                  __o");
    String line2 = new String("      _`\\<,_                                                                                                             _`\\<,_");
    String line3 = new String("    ( * )/  ( * )                                                                                                       ( * )/  ( * )");
    String line4 = new String("/\\/\\/\\/\\/\\/\\                                                                                        o;_      /\\/\\/\\/\\/\\/\\");
    String line5 = new String("                     \\( * ) |\\                                                                             / ( * )/");
    String line6 = new String("                      \\  --_\\o           __o                 __o                 __o           /_-\\ /");
    String line7 = new String("                       \\( * ) !         _`\\<,_             _`\\<,_           _`\\<,_           ( * )/");
    String line8 = new String("                        \\             ( * )/   ( * )        ( * )/  ( * )       ( * )/  ( * )              /");
    String line9 = new String("                         \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/");
    String emptyLine = new String("");
    String line10 = new String("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
    String line11 = new String("* * * * * * * * * * * * * * * * * * * * * * * * BICYLE RACE * * * * * * * * * * * * * * * * * * * * * * * * *");
    String line12 = new String("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
    String[] lineholder = {line1, line2, line3, line4, line5, line6, line7, line8, line9, emptyLine, line10, line11, line12};
    StringBuilder bikePic = new StringBuilder();
    for(int i = 0; i < lineholder.length; i++){
      bikePic.append(lineholder[i] + "\n");
    }//end for loop
    JOptionPane.showMessageDialog(null,bikePic.toString(),"Bicycle Race!",JOptionPane.INFORMATION_MESSAGE);
  }//end animateBike

}//end class RidePrep
