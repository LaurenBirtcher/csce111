import javax.swing.JOptionPane;
import java.util.*;
import java.util.Arrays;

class CardsOfThrones{

  static ArrayList<String> player1Hand;
  static ArrayList<String> player2Hand;
  static ArrayList<String> player3Hand;
  static ArrayList<String> player4Hand;
  //begin class
  public static void main(String[] args){//begin main

  //intro done by Janie and Lauren
  System.out.println();
  System.out.println("Welcome to Cards of Thrones!\n");
  System.out.println("Summers span decades. Winters can last a lifetime. And the struggle for the Iron Throne begins.");
  System.out.println("If you follow the rules and play your cards carefully, maybe the Throne will be yours...");
  // state rules to user
  //need to figure out/clarify rule 7
  System.out.println("\nGame Rules:"+"\n1. This game is for 4 players. Each player chooses a character."+
                    "\n2. Remove jokers and split the deck evenly among all four players. (13 cards each)"+
                    "\n3. Each player draws 5 cards from their deck of 13."+
                    "\n4. Each player chooses 1 card to play."+
                    "\n5. The highest card value wins, but a 7 beats any numerical card."+
                    "\n6. In the event of a tie, compare suits."+
                    "\n7. triple round? rivalry or alliance? increase value by 1? ---> ???"+
                    "\n8. At the end of each round, players draw one more card to maintain 5 in their hand."+
                    "\n9. The first player to win 10 rounds wins the game.");

  //each player chooses character (Robb Stark, Daenerys Targaryen, King Joffrey, and Stannis Baratheon)
  //player selction done by Lauren
  System.out.println("\nThe characters in this card game are Robb Stark, Daenerys Targaryen, King Joffrey, and Stannis Baratheon.");
  String player1, player2, player3, player4;
  Scanner keyboard = new Scanner(System.in);
  System.out.println("Player 1, please enter the name of the character you would like to be.");
  player1 = keyboard.nextLine();
  System.out.println("Player 2, please enter the name of the character you would like to be.");
  player2 = keyboard.nextLine();
  System.out.println("Player 3, please enter the name of the character you would like to be.");
  player3 = keyboard.nextLine();
  System.out.println("Player 4, please enter the name of the character you would like to be.");
  player4 = keyboard.nextLine();

  //array and list defined by Janie
  //C for club, S for spade, D for diamond, H for heart
  String cards[] = {"A-C", "2-C", "3-C", "4-C", "5-C", "6-C", "7-C", "8-C", "9-C", "10-C", "J-C", "Q-C", "K-C",
                    "A-S", "2-S", "3-S", "4-S", "5-S", "6-S", "7-S", "8-S", "9-S", "10-S", "J-S", "Q-S", "K-S",
                    "A-D", "2-D", "3-D", "4-D", "5-D", "6-D", "7-D", "8-D", "9-D", "10-D", "J-D", "Q-D", "K-D",
                    "A-H", "2-H", "3-H", "4-H", "5-H", "6-H", "7-H", "8-H", "9-H", "10-H", "J-H", "Q-H", "K-H"};

  ArrayList<String> deck = new ArrayList<String>(Arrays.asList(cards));
  Collections.shuffle(deck);

  //dealing done by Janie and Lauren
  player1Hand = new ArrayList<String>(deck.subList(0, 13));
  System.out.println(player1+"'s hand is "+player1Hand);
  player2Hand = new ArrayList<String>(deck.subList(13, 26));
  System.out.println(player2+"'s hand is "+player2Hand);
  player3Hand = new ArrayList<String>(deck.subList(26, 39));
  System.out.println(player3+"'s hand is "+player3Hand);
  player4Hand = new ArrayList<String>(deck.subList(39, 52));
  System.out.println(player4+"'s hand is "+player4Hand);
  
  //assigning values function done by Janie
  //note: can be generalized for all four players
  //since the suits do not matter in ranking of value to determine winner of the round,
  //assign corresponding numerical values as soon as the deck is split evenly among all players (13 each)
  ArrayList<String> player1HandValues = assignValues(player1Hand);
  ArrayList<String> player2HandValues = assignValues(player2Hand);
  ArrayList<String> player3HandValues = assignValues(player3Hand);
  ArrayList<String> player4HandValues = assignValues(player4Hand);

  //function done by Lauren
  //(note: Janie) modified to take into account assigning values done above
  ArrayList<String> player1Five = pickFive(player1HandValues);
  ArrayList<String> player2Five = pickFive(player2HandValues);
  ArrayList<String> player3Five = pickFive(player3HandValues);
  ArrayList<String> player4Five = pickFive(player4HandValues);
  
  //this part is just for checking, can be deleted later
  //(note: Janie) modified for more clarification in checking
  System.out.println("Player 1 draws these five cards: " + player1Five);
  System.out.println("Player 1 has these eight cards in hand: " + player1HandValues);
  System.out.println("Player 2 draws these five cards: " + player2Five);
  System.out.println("Player 2 has these eight cards in hand: " + player2HandValues);
  System.out.println("Player 3 draws these five cards: " + player3Five);
  System.out.println("Player 3 has these eight cards in hand: " + player3HandValues);
  System.out.println("Player 4 draws these five cards: " + player4Five);
  System.out.println("Player 4 has these eight cards in hand: " + player4HandValues);
  
  //NEXT ---> each player chooses 1 card to play

  }//end main
  
  //function created by Janie
  /**
  Method assignValues will do the following: immediately after deck is split evenly among all players,
  the corresponding numerical value of the cards will be set and assigned
  @param String ArrayList
  @return String ArrayList
  */
  public static ArrayList<String> assignValues(ArrayList<String> hand){
    ArrayList<String> playerHandValues = new ArrayList<String>();
    for (int i = 0; i < hand.size(); i++){
      //System.out.println(playerHand.get(i));
      String value = hand.get(i);
      String[] splitCard = value.split("-");
      playerHandValues.add(splitCard[0]);
    }//end for
    //System.out.println(playerHandValues); ---> check, delete later
    for (int j = 0; j < playerHandValues.size(); j++){
      if(playerHandValues.get(j).equals("A")){
        playerHandValues.remove(j);
        playerHandValues.add(j,"1");
      }//end if
      if(playerHandValues.get(j).equals("J")){
        playerHandValues.remove(j);
        playerHandValues.add(j,"11");
      }//end if
      if(playerHandValues.get(j).equals("Q")){
        playerHandValues.remove(j);
        playerHandValues.add(j,"12");
      }//end if
      if(playerHandValues.get(j).equals("K")){
        playerHandValues.remove(j);
        playerHandValues.add(j,"13");
      }//end if
    }//end for
    //System.out.println(playerHandValues); ---> check, delete later
  return playerHandValues;
  }//end assignValues function
  
  //function created by Lauren
  /**
  Method pickFive will do the following: select five cards from the "bottom" of each player's deck
  and remove those five cards from hand of 13
  @param String ArrayList
  @return String ArrayList
  */
  public static ArrayList<String> pickFive(ArrayList<String> hand){
    ArrayList<String> fiveCards = new ArrayList<String>();
    for (int i=0; i<5;i++) {
      fiveCards.add(hand.get(hand.size()-1));
      hand.remove(hand.size()-1);
    }//end for
  return fiveCards;
  }//end pickFive function

}//end class

//whole game in dialog boxes?

//use pictures of character in java code to let player select character

//each player draws 5 cards from THEIR deck of 13
//each player chooses 1 card of the 5 to play (places face down)
//all four cards revealed at once

//highest value card wins (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 = Ace, 2, 3, ..., 10, Jack, Queen, King)
//If there is a tie, winner decided by highest suit (1, 2, 3, 4 = Club, Spade, Diamond, Heart)
//7 beats any NUMERICAL card but not face cards

//Rule #7??
//triple round:

//min # of rounds is 6
//max # of rounds is 37

